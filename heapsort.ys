#
# Calling conventions:
#     %rdi, %rsi, %rdx, %rcx, %r8, %r9, %r10, %r11 and %rax are caller saved
#     %rbx, %rbp, %r12, %r13, %r14 are callee saved
#     %rsp can not be used except for its normal use as a stack pointer.
#     argument are passed through registers %rdi, %rsi, %rdx in this order.
#     values are returned through %rax
#
.pos 0x100

main:	
	xorq   %rdi, %rdi        # %rdi = 0
	mrmovq size(%rdi), %rdi  # %rdi = size
	
	irmovq bottom,  %rsp     # initialize stack
	call   heapsort
	halt

#
# get_element
#     %rdi: element index
# returns:
#     %rax: the element

get_element:
#	addq   %rdi, %rdi
#	addq   %rdi, %rdi
#	addq   %rdi, %rdi

    irmovq $8, %rax
    mulq %rax, %rdi

	mrmovq heap(%rdi), %rax
	ret
	
#
# put_element
#     %rdi: element index
#     %rsi: element

put_element:
#	addq   %rdi, %rdi
#	addq   %rdi, %rdi
#	addq   %rdi, %rdi

    irmovq $8, %rax
    mulq %rax, %rdi
    
	rmmovq %rsi, heap(%rdi)
	ret

#
# Swap:
#    %rdi: index1
#    %rsi: index2
#
swap:	
	pushq  %r12             # Callee save register
	pushq  %rsi             # Save these too as we'll need them later
	pushq  %rdi
	
    irmovq $8, %rax
    mulq %rax, %rdi

	mrmovq heap(%rdi), %r12
	
	rrmovq %rsi, %rdi       # tmp2 = heap[index2]
    mulq %rax, %rdi

	mrmovq heap(%rdi), %rsi

	popq   %rdi             # heap[index1] = tmp2

    mulq %rax, %rdi
	rmmovq %rsi, heap(%rdi)

	popq   %rdi             # heap[index2] = tmp (yes, %rdi not %rsi)
    mulq %rax, %rdi
    
	rmmovq %r12, heap(%rdi)

	popq %r12
	ret

#
# Check_child
#     %rdi: child index
#     %rsi: index of highest
#     %rdx: last
# Returns:
#     %rax: true if child <= last && heap[highest] < heap[child]
#
check_child:
	pushq  %rbx

	rrmovq %rdi, %rbx       # if child <= last, we can continue
	subq   %rdx, %rbx
	jle     check_child_continue

	xorq %rax, %rax
	popq %rbx
	ret

check_child_continue:
    irmovq $8, %r8
    irmovq $1, %rdx
    xorq %rax, %rax
    
    mulq %r8, %rdi
    rrmovq %rsi, %rbx      # get heap[highest]
    mulq %r8, %rbx

	mrmovq heap(%rdi), %rcx
	mrmovq heap(%rbx), %rbx    

	subq   %rbx, %rcx      # if heap[child] > heap[highest], return 1
	cmovg  %rdx, %rax

	popq %rbx
	ret

#
# Heapify_node
#     %rdi: index
#     %rsi: last
#
# Local variables:
#     %rbx: index
#     %r12: highest
#     %r13: last
#
heapify_node:
	pushq  %rbx             # Save %rbx and use it to store index
	pushq  %r12
	pushq  %r13
	rrmovq %rdi, %r12       # %r12 = highest
	rrmovq %rsi, %r13       # %r13 = last
	rrmovq %rdi, %rbx

heapify_loop:
	irmovq $1,   %r8
	rrmovq %rbx, %rdi       # left_child = 2 * index + 1
	addq   %rdi, %rdi

	addq   %r8,  %rdi
	rrmovq %r12, %rsi
	rrmovq %r13, %rdx

	pushq  %rdi             # save this as we'll need it after the call
	call   check_child
	popq   %rdi
	
	andq   %rax, %rax
	cmovne %rdi, %r12  

	rrmovq %rbx, %rdi       # right_child = 2 * index + 2
	addq   %rdi, %rdi
	irmovq $2,   %r8	
	addq   %r8,  %rdi
	rrmovq %r12, %rsi
	rrmovq %r13, %rdx

	pushq  %rdi             # save this as we'll need it after the call
	call   check_child
	popq  %rdi
	andq   %rax, %rax
	cmovne %rdi, %r12

	rrmovq %r12, %rdi
	subq   %rbx, %rdi
	jne     heapify_continue
	popq   %r13
	popq   %r12
	popq   %rbx
	ret

heapify_continue:
	rrmovq %r12, %rdi
	rrmovq %rbx, %rsi


	# call   swap
	pushq  %r12             # Callee save register
	pushq  %rbx             # Save these too as we'll need them later
	pushq  %r12
	
    irmovq $8, %rax
    mulq %rax, %rdi

	mrmovq heap(%rdi), %r12
	
	rrmovq %rsi, %rdi       # tmp2 = heap[index2]
    mulq %rax, %rdi

	mrmovq heap(%rdi), %rsi

	popq   %rdi             # heap[index1] = tmp2

    mulq %rax, %rdi
	rmmovq %rsi, heap(%rdi)

	popq   %rdi             # heap[index2] = tmp (yes, %rdi not %rsi)
    mulq %rax, %rdi
    
	rmmovq %r12, heap(%rdi)

	popq %r12



	rrmovq %r12, %rbx
	jmp    heapify_loop

#
# Heapify_array
#     %rdi: last
#
heapify_array:
	pushq  %r12             # Save %r12 and use it to store 'last'
	pushq  %rbx             # Save %rbx before using it for i
	rrmovq %rdi, %r12

	irmovq $1, %rsi		# %rdi = last - 1
	subq   %rsi, %rdi
	irmovq $2, %rsi		# %rdi = (last - 1)/2
	divq   %rsi, %rdi
	rrmovq %rdi, %rbx       # i = %rdi
	
ha_loop:
	andq   %rbx, %rbx       # check if i < 0
	jge     ha_continue
	popq   %rbx
	popq   %r12
	ret

ha_continue:
	rrmovq %rbx, %rdi       # Set %rdi = i, %rsi = last      
	rrmovq %r12, %rsi
	pushq  %rdi
	call   heapify_node     # Heapify the node
        popq   %rdi
	
	irmovq $1, %rdi         # i--
	subq   %rdi, %rbx
	jmp    ha_loop
	
#
# Extract_max
#     %rdi: last
#
extract_max:
	pushq  %rbx		# Save %rax before using it for max

    pushq  %rdi             # Save this as we'll need it later
	xorq   %rdi, %rdi       # max = heap[0]
    irmovq $8, %rax
    mulq %rax, %rdi

	mrmovq heap(%rdi), %rbx

	mrmovq 0(%rsp), %rdi    # Recover %rdi, but leave it on the stack too.
    mulq %rax, %rdi

	mrmovq heap(%rdi), %rax

	xorq   %rdi, %rdi
	rmmovq %rax, heap(%rdi)

	popq   %rdi
	rrmovq %rdi, %rsi	# %rsi = last - 1
	irmovq $1, %rcx
	subq   %rcx, %rsi
	xorq   %rdi, %rdi       # %rdi = 0
	call   heapify_node     # Heapify the root

	rrmovq %rbx, %rax       # Set return value to max
	popq   %rbx
	ret

#
# Heapsort
#    %rdi: Number of entries in the array
#
heapsort:
	irmovq 1, %rsi
	pushq  %rbx

	subq   %rsi, %rdi	# %rdi is now the index of the last element
	jle    hs_ret		# If there were 1 or 0 entries, we are done
	rrmovq %rdi, %rbx       # %rbx (i) = last
	call   heapify_array    # heapify_array(last)

hs_loop:
	andq   %rbx, %rbx	# Test if i < 0
	jge     hs_continue
hs_ret:	popq   %rbx
	ret

hs_continue:
	rrmovq %rbx, %rdi       # max = extract_max(i)
	call   extract_max

	rrmovq %rbx, %rsi       # heap[i] = max
	addq   %rsi, %rsi
	addq   %rsi, %rsi
	addq   %rsi, %rsi
        rmmovq %rax, heap(%rsi)

	irmovq $1, %rdi         # i--
	subq   %rdi, %rbx
	jmp    hs_loop
	popq   %rbx
	ret

#
# Array to sort
#
.pos 0x1000
heap:	
	.quad	0x5efa0
	.quad	0xc2764
	.quad	0xb2a00
	.quad	0xf45e3
	.quad	0x9554c

size:   .quad 5
	
#
# Stack (32 thirty-two bit words is more than enough here).
#
.pos 0x3000
top:	            .quad 0x00000000		# top of stack.
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
                    .quad 0x00000000
bottom:             .quad 0x00000000		# bottom of stack.
